!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="public",n(n.s=4)}([function(t,e,n){"use strict";
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */var o=".js-form-submit-btn",i=window.$,r=function(){i(document).on("click",o,(function(t){t.preventDefault();var e=i(t.target);if(!e.data("form-confirm-message")||!1!==window.confirm(e.data("form-confirm-message"))){var n="POST",o=null;if(e.data("method")){var r=e.data("method"),a=["GET","POST"].includes(r);n=a?r:"POST",a||(o=i("<input>",{type:"_hidden",name:"_method",value:r}))}var s=i("<form>",{action:e.data("form-submit-url"),method:n});o&&s.append(o),e.data("form-csrf-token")&&s.append(i("<input>",{type:"_hidden",name:"_csrf_token",value:e.data("form-csrf-token")})),s.appendTo("body").submit()}}))};
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */e.a=r},function(t,e,n){"use strict";(function(t){var n=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var n=-1;return t.some((function(t,o){return t[0]===e&&(n=o,!0)})),n}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var n=t(this.__entries__,e),o=this.__entries__[n];return o&&o[1]},e.prototype.set=function(e,n){var o=t(this.__entries__,e);~o?this.__entries__[o][1]=n:this.__entries__.push([e,n])},e.prototype.delete=function(e){var n=this.__entries__,o=t(n,e);~o&&n.splice(o,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,o=this.__entries__;n<o.length;n++){var i=o[n];t.call(e,i[1],i[0])}},e}()}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==t&&t.Math===Math?t:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),r="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)};var a=["top","right","bottom","left","width","height","size","weight"],s="undefined"!=typeof MutationObserver,c=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var n=!1,o=!1,i=0;function a(){n&&(n=!1,t()),o&&c()}function s(){r(a)}function c(){var t=Date.now();if(n){if(t-i<2)return;o=!0}else n=!0,o=!1,setTimeout(s,e);i=t}return c}(this.refresh.bind(this),20)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),s?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?"":e;a.some((function(t){return!!~n.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),l=function(t,e){for(var n=0,o=Object.keys(e);n<o.length;n++){var i=o[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},u=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||i},d=v(0,0,0,0);function f(t){return parseFloat(t)||0}function h(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce((function(e,n){return e+f(t["border-"+n+"-width"])}),0)}function m(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return d;var o=u(t).getComputedStyle(t),i=function(t){for(var e={},n=0,o=["top","right","bottom","left"];n<o.length;n++){var i=o[n],r=t["padding-"+i];e[i]=f(r)}return e}(o),r=i.left+i.right,a=i.top+i.bottom,s=f(o.width),c=f(o.height);if("border-box"===o.boxSizing&&(Math.round(s+r)!==e&&(s-=h(o,"left","right")+r),Math.round(c+a)!==n&&(c-=h(o,"top","bottom")+a)),!function(t){return t===u(t).document.documentElement}(t)){var l=Math.round(s+r)-e,m=Math.round(c+a)-n;1!==Math.abs(l)&&(s-=l),1!==Math.abs(m)&&(c-=m)}return v(i.left,i.top,s,c)}var p="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof u(t).SVGGraphicsElement}:function(t){return t instanceof u(t).SVGElement&&"function"==typeof t.getBBox};function b(t){return o?p(t)?function(t){var e=t.getBBox();return v(0,0,e.width,e.height)}(t):m(t):d}function v(t,e,n,o){return{x:t,y:e,width:n,height:o}}var y=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=v(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=b(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),g=function(t,e){var n,o,i,r,a,s,c,u=(o=(n=e).x,i=n.y,r=n.width,a=n.height,s="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,c=Object.create(s.prototype),l(c,{x:o,y:i,width:r,height:a,top:i,right:o+r,bottom:a+i,left:o}),c);l(this,{target:t,contentRect:u})},w=function(){function t(t,e,o){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=o}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof u(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new y(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof u(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new g(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),_="undefined"!=typeof WeakMap?new WeakMap:new n,O=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=c.getInstance(),o=new w(e,n,this);_.set(this,o)};["observe","unobserve","disconnect"].forEach((function(t){O.prototype[t]=function(){var e;return(e=_.get(this))[t].apply(e,arguments)}}));var C=void 0!==i.ResizeObserver?i.ResizeObserver:O;e.a=C}).call(this,n(3))},,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */var o={categoryDeleteAction:".js-delete-category-row-action",customerDeleteAction:".js-delete-customer-row-action",linkRowAction:".js-link-row-action",linkRowActionClickableFirst:".js-link-row-action[data-clickable-row=1]:first",clickableTd:"td.clickable"},i={showQuery:".js-common_show_query-grid-action",exportQuery:".js-common_export_sql_manager-grid-action",showModalForm:function(t){return"#".concat(t,"_common_show_query_modal_form")},showModalGrid:function(t){return"#".concat(t,"_grid_common_show_query_modal")},modalFormSubmitBtn:".js-bulk-modal-form-submit-btn",submitModalFormBtn:".js-submit-modal-form-btn",bulkInputsBlock:function(t){return"#".concat(t)},tokenInput:function(t){return'input[name="'.concat(t,'[_token]"]')},ajaxBulkActionConfirmModal:function(t,e){return"".concat(t,"-ajax-").concat(e,"-confirm-modal")},ajaxBulkActionProgressModal:function(t,e){return"".concat(t,"-ajax-").concat(e,"-progress-modal")}},r=function(t){return"".concat(t,"-grid-confirm-modal")},a=".js-grid-table",s=function(t){return"#".concat(t,"_grid")},c=".js-grid-panel",l=".js-grid-header",u=".ps-togglable-row",d="table.table",f=".header-toolbar",h=".breadcrumb-item",m=".js-reset-search",p=".js-common_refresh_list-grid-action",b=".btn-sql-submit",v=window.$,y=function(){function t(t){this.id=t,this.$container=v(s(this.id))}return t.prototype.getId=function(){return this.id},t.prototype.getContainer=function(){return this.$container},t.prototype.getHeaderContainer=function(){return this.$container.closest(c).find(l)},t.prototype.addExtension=function(t){t.extend(this)},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
function g(t){return void 0===t}
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
var w,_=window.$,O=function(){function t(t){void 0===t&&(t=void 0),this.onClick=t}return t.prototype.extend=function(t){this.initRowLinks(t),this.initConfirmableActions(t)},t.prototype.initConfirmableActions=function(t){t.getContainer().on("click",o.linkRowAction,(function(t){var e=_(t.currentTarget).data("confirm-message");e.length&&!window.confirm(e)&&t.preventDefault()}))},t.prototype.initRowLinks=function(t){var e=this.onClick;_("tr",t.getContainer()).each((function(){var t=_(this);_(o.linkRowActionClickableFirst,t).each((function(){var n=_(this),i=n.closest("td"),r=_(o.clickableTd,t).not(i),a=!1;r.addClass("cursor-pointer").mousedown((function(){_(window).mousemove((function(){a=!0,_(window).unbind("mousemove")}))})),r.mouseup((function(){var t=a;if(a=!1,_(window).unbind("mousemove"),!t){var o=n.data("confirm-message");(!o.length||window.confirm(o)&&n.attr("href"))&&(g(e)||g(n.get(0))?document.location.href=n.attr("href"):e(n.get(0)))}}))}))}))},t}(),C=function(){return(C=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},E=function(){function t(t){var e=C({id:"confirm-modal",closable:!1},t);this.buildModalContainer(e)}return t.prototype.buildModalContainer=function(t){var e=this;this.container=document.createElement("div"),this.container.classList.add("modal","fade"),this.container.id=t.id,this.dialog=document.createElement("div"),this.dialog.classList.add("modal-dialog"),t.dialogStyle&&Object.keys(t.dialogStyle).forEach((function(n){e.dialog.style[n]=t.dialogStyle[n]})),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.message=document.createElement("p"),this.message.classList.add("modal-message"),this.header=document.createElement("div"),this.header.classList.add("modal-header"),t.modalTitle&&(this.title=document.createElement("h4"),this.title.classList.add("modal-title"),this.title.innerHTML=t.modalTitle),this.closeIcon=document.createElement("button"),this.closeIcon.classList.add("close"),this.closeIcon.setAttribute("type","button"),this.closeIcon.dataset.dismiss="modal",this.closeIcon.innerHTML="×",this.body=document.createElement("div"),this.body.classList.add("modal-body","text-left","font-weight-normal"),this.title&&this.header.appendChild(this.title),this.header.appendChild(this.closeIcon),this.content.append(this.header,this.body),this.body.appendChild(this.message),this.dialog.appendChild(this.content),this.container.appendChild(this.dialog)},t}(),L=function(){function t(t){var e=C({id:"confirm-modal",closable:!1,dialogStyle:{}},t);this.initContainer(e)}return t.prototype.initContainer=function(t){this.modal||(this.modal=new E(t)),this.$modal=$(this.modal.container);var e=t.id,n=t.closable;this.$modal.modal({backdrop:!!n||"static",keyboard:void 0===n||n,show:!1}),this.$modal.on("hidden.bs.modal",(function(){var n=document.querySelector("#".concat(e));n&&n.remove(),t.closeCallback&&t.closeCallback()})),document.body.appendChild(this.modal.container)},t.prototype.setTitle=function(t){return this.modal.title||(this.modal.title=document.createElement("h4"),this.modal.title.classList.add("modal-title"),this.modal.closeIcon?this.modal.header.insertBefore(this.modal.title,this.modal.closeIcon):this.modal.header.appendChild(this.modal.title)),this.modal.title.innerHTML=t,this},t.prototype.render=function(t){return this.modal.message.innerHTML=t,this},t.prototype.show=function(){return this.$modal.modal("show"),this},t.prototype.hide=function(){var t=this;return this.$modal.modal("hide"),this.$modal.on("shown.bs.modal",(function(){t.$modal.modal("hide"),t.$modal.off("shown.bs.modal")})),this},t}(),k=(w=function(t,e){return(w=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}w(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),B=function(){return(B=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},M=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},T=function(t){function e(e){return t.call(this,e)||this}return k(e,t),e.prototype.buildModalContainer=function(e){var n;t.prototype.buildModalContainer.call(this,e),this.message.classList.add("confirm-message"),this.message.innerHTML=e.confirmMessage,this.footer=document.createElement("div"),this.footer.classList.add("modal-footer"),this.closeButton=document.createElement("button"),this.closeButton.setAttribute("type","button"),this.closeButton.classList.add("btn","btn-outline-secondary","btn-lg"),this.closeButton.dataset.dismiss="modal",this.closeButton.innerHTML=e.closeButtonLabel,this.confirmButton=document.createElement("button"),this.confirmButton.setAttribute("type","button"),this.confirmButton.classList.add("btn",e.confirmButtonClass,"btn-lg","btn-confirm-submit"),this.confirmButton.dataset.dismiss="modal",this.confirmButton.innerHTML=e.confirmButtonLabel,(n=this.footer).append.apply(n,M(M([this.closeButton],e.customButtons,!1),[this.confirmButton],!1)),this.content.append(this.footer)},e}(E),x=function(t){function e(e,n,o){var i,r;r=g(e.confirmCallback)?g(n)?function(){console.error("No confirm callback provided for ConfirmModal component.")}:n:e.confirmCallback;var a=B({id:"confirm-modal",confirmMessage:"Are you sure?",closeButtonLabel:"Close",confirmButtonLabel:"Accept",confirmButtonClass:"btn-primary",customButtons:[],closable:!1,modalTitle:e.confirmTitle,dialogStyle:{},confirmCallback:r,closeCallback:null!==(i=e.closeCallback)&&void 0!==i?i:o},e);return t.call(this,a)||this}return k(e,t),e.prototype.initContainer=function(e){this.modal=new T(e),this.modal.confirmButton.addEventListener("click",e.confirmCallback),t.prototype.initContainer.call(this,e)},e}(L),j=n(1),S=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),A=function(t){function e(n,o){void 0===o&&(o={});var i=t.call(this,e.parentWindowEvent)||this;return i.eventName=n,i.eventParameters=o,i}return S(e,t),Object.defineProperty(e.prototype,"name",{get:function(){return this.eventName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parameters",{get:function(){return this.eventParameters},enumerable:!1,configurable:!0}),e.parentWindowEvent="IframeClientEvent",e}(Event),z=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),P=function(){return(P=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},R=function(t){function e(e){return t.call(this,e)||this}return z(e,t),e.prototype.buildModalContainer=function(e){t.prototype.buildModalContainer.call(this,e),this.container.classList.add("modal-iframe"),this.message.classList.add("d-none"),this.iframe=document.createElement("iframe"),this.iframe.frameBorder="0",this.iframe.scrolling="no",this.iframe.width="100%",this.iframe.setAttribute("name","".concat(e.id,"-iframe")),e.autoSize||(this.iframe.height="100%"),this.loader=document.createElement("div"),this.loader.classList.add("modal-iframe-loader"),this.spinner=document.createElement("div"),this.spinner.classList.add("spinner"),this.loader.appendChild(this.spinner),this.body.append(this.loader,this.iframe),g(e.closeButtonLabel)&&g(e.confirmButtonLabel)||(this.footer=document.createElement("div"),this.footer.classList.add("modal-footer"),g(e.closeButtonLabel)||(this.closeButton=document.createElement("button"),this.closeButton.setAttribute("type","button"),this.closeButton.classList.add("btn","btn-outline-secondary","btn-lg"),this.closeButton.dataset.dismiss="modal",this.closeButton.innerHTML=e.closeButtonLabel,this.footer.append(this.closeButton)),g(e.confirmButtonLabel)||(this.confirmButton=document.createElement("button"),this.confirmButton.setAttribute("type","button"),this.confirmButton.classList.add("btn","btn-primary","btn-lg","btn-confirm-submit"),e.closeOnConfirm&&(this.confirmButton.dataset.dismiss="modal"),this.confirmButton.innerHTML=e.confirmButtonLabel,this.footer.append(this.confirmButton)),this.content.append(this.footer))},e}(E),I=function(t){function e(e){var n=P({id:"iframe-modal",closable:!1,autoSize:!0,autoSizeContainer:"body",closeOnConfirm:!0,autoScrollUp:!0},e);return t.call(this,n)||this}return z(e,t),e.prototype.initContainer=function(e){var n=this;this.modal=new R(e),t.prototype.initContainer.call(this,e),this.autoSize=e.autoSize,this.autoSizeContainer=e.autoSizeContainer,this.modal.iframe.addEventListener("load",(function(t){n.modal.body.scroll(0,0),n.hideLoading(),e.onLoaded&&e.onLoaded(n.modal.iframe,t),n.modal.iframe.contentWindow&&(n.modal.iframe.contentWindow.addEventListener("beforeunload",(function(t){e.onUnload&&e.onUnload(n.modal.iframe,t),n.showLoading()})),n.initAutoResize())})),this.$modal.on("shown.bs.modal",(function(){n.modal.iframe.src=e.iframeUrl})),window.addEventListener(A.parentWindowEvent,(function(t){e.onIframeEvent&&e.onIframeEvent(t)})),this.modal.confirmButton&&e.confirmCallback&&this.modal.confirmButton.addEventListener("click",(function(t){e.confirmCallback&&e.confirmCallback(n.modal.iframe,t)}))},e.prototype.render=function(t,e){return void 0===e&&(e=!0),this.modal.message.innerHTML=t,this.modal.message.classList.remove("d-none"),e&&this.hideIframe(),this.autoResize(),this.hideLoading(),this},e.prototype.showLoading=function(){var t=this.getOuterHeight(this.modal.body),e=this.getOuterWidth(this.modal.body);return this.modal.loader.style.height="".concat(t,"px"),this.modal.loader.style.width="".concat(e,"px"),this.modal.loader.classList.remove("d-none"),this.modal.iframe.classList.remove("invisible"),this.modal.iframe.classList.add("invisible"),this},e.prototype.hideLoading=function(){return this.modal.iframe.classList.remove("invisible"),this.modal.iframe.classList.add("visible"),this.modal.loader.classList.add("d-none"),this},e.prototype.hide=function(){return t.prototype.hide.call(this),this.cleanResizeObserver(),this},e.prototype.hideIframe=function(){this.modal.iframe.classList.add("d-none")},e.prototype.getResizableContainer=function(){return this.autoSize&&this.modal.iframe.contentWindow?this.modal.iframe.contentWindow.document.querySelector(this.autoSizeContainer):null},e.prototype.initAutoResize=function(){var t=this,e=this.getResizableContainer();e&&(this.cleanResizeObserver(),this.resizeObserver=new j.a((function(){t.autoResize()})),this.resizeObserver.observe(e)),this.autoResize()},e.prototype.cleanResizeObserver=function(){this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null)},e.prototype.autoResize=function(){var t=this.getResizableContainer();if(t){var e=t.scrollHeight,n=this.getOuterHeight(this.modal.message)+e;n&&(this.modal.iframe.style.height="".concat(n,"px"))}},e.prototype.getOuterHeight=function(t){if(!t.offsetHeight)return 0;var e=t.offsetHeight,n=getComputedStyle(t);return e+=parseInt(n.marginTop,10)+parseInt(n.marginBottom,10)},e.prototype.getOuterWidth=function(t){if(!t.offsetWidth)return 0;var e=t.offsetWidth,n=getComputedStyle(t);return e+=parseInt(n.marginLeft,10)+parseInt(n.marginRight,10)},e}(L),F=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),H=function(){return(H=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},q=(function(t){function e(e){var n=this,o=H({iframeUrl:e.formUrl,onLoaded:function(t,o){var i,r;n.onIframeLoaded(t,o,e.onFormLoaded,null!==(i=e.cancelButtonSelector)&&void 0!==i?i:".cancel-btn",null!==(r=e.formSelector)&&void 0!==r?r:"form")},confirmCallback:function(t,o){var i;n.onConfirmCallback(t,o,e.formConfirmCallback,null!==(i=e.formSelector)&&void 0!==i?i:"form")}},e);return n=t.call(this,o)||this}F(e,t),e.prototype.onIframeLoaded=function(t,e,n,o,i){var r,a=this;if(n){var s=this.getForm(t,i);if(s)s.querySelectorAll(o).forEach((function(t){t.addEventListener("click",(function(){a.hide()}))})),n(s,new FormData(s),null!==(r=s.dataset)&&void 0!==r?r:null,e)}},e.prototype.onConfirmCallback=function(t,e,n,o){if(n){var i=this.getForm(t,o);i&&n(i,t,e)}},e.prototype.getForm=function(t,e){return t.contentWindow?t.contentWindow.document.querySelector(e):null}}(I),window.$),D=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getContainer().on("click",".js-submit-row-action",(function(n){n.preventDefault();var o=q(n.currentTarget),i=o.data("confirmMessage"),r=o.data("title"),a=o.data("method");if(r)e.showConfirmModal(o,t,i,r,a);else{if(i.length&&!window.confirm(i))return;e.postForm(o,a)}}))},t.prototype.postForm=function(t,e){var n=["GET","POST"].includes(e),o=q("<form>",{action:t.data("url"),method:n?e:"POST"}).appendTo("body");n||o.append(q("<input>",{type:"hidden",name:"_method",value:e})),o.submit()},t.prototype.showConfirmModal=function(t,e,n,o,i){var a=this,s=t.data("confirmButtonLabel"),c=t.data("closeButtonLabel"),l=t.data("confirmButtonClass");new x({id:r(e.getId()),confirmTitle:o,confirmMessage:n,confirmButtonLabel:s,closeButtonLabel:c,confirmButtonClass:l},(function(){return a.postForm(t,i)})).show()},t}(),W=window.$,U=function(){function t(t){var e;this.selector=".ps-sortable-column",this.idTable=null!==(e=t.attr("id"))&&void 0!==e?e:"",this.columns=t.find(this.selector)}return t.prototype.attach=function(){var t=this;this.columns.on("click",(function(e){var n=W(e.delegateTarget);t.sortByColumn(n,t.getToggledSortDirection(n))}))},t.prototype.sortBy=function(t,e){if(!this.columns.is('[data-sort-col-name="'.concat(t,'"]')))throw new Error('Cannot sort by "'.concat(t,'": invalid column'));this.sortByColumn(this.columns,e)},t.prototype.sortByColumn=function(t,e){window.location.href=this.getUrl(t.data("sortColName"),"desc"===e?"desc":"asc",t.data("sortPrefix"))},t.prototype.getToggledSortDirection=function(t){return"asc"===t.data("sortDirection")?"desc":"asc"},t.prototype.getUrl=function(t,e,n){var o=new URL(window.location.href),i=o.searchParams;return n?(i.set("".concat(n,"[orderBy]"),t),i.set("".concat(n,"[sortOrder]"),e)):(i.set("orderBy",t),i.set("sortOrder",e)),o.hash=this.idTable,o.toString()},t}(),G=function(){function t(){}return t.prototype.extend=function(t){var e=t.getContainer().find(d);new U(e).attach()},t}();
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
const{$:N}=window;var Q=function(t,e){N.post(t).then(()=>window.location.assign(e))},V=window.$,J=function(){function t(){}return t.prototype.extend=function(t){t.getContainer().on("click",m,(function(t){Q(V(t.currentTarget).data("url"),V(t.currentTarget).data("redirect"))}))},t}(),K=function(){function t(){}return t.prototype.extend=function(t){t.getHeaderContainer().on("click",p,(function(){window.location.reload()}))},t}(),X=window.$,Y=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getContainer().find(d).find(u).on("click",(function(t){t.preventDefault(),e.toggleValue(X(t.delegateTarget))}))},t.prototype.toggleValue=function(t){var e=t.data("toggleUrl");this.submitAsForm(e)},t.prototype.submitAsForm=function(t){X("<form>",{action:t,method:"POST"}).appendTo("body").submit()},t}(),Z=window.$,tt=function(){function t(){}return t.prototype.extend=function(t){var e=this;t.getHeaderContainer().on("click",i.showQuery,(function(){return e.onShowSqlQueryClick(t)})),t.getHeaderContainer().on("click",i.exportQuery,(function(){return e.onExportSqlManagerClick(t)}))},t.prototype.onShowSqlQueryClick=function(t){var e=Z(i.showModalForm(t.getId()));this.fillExportForm(e,t);var n=Z(i.showModalGrid(t.getId()));n.modal("show"),n.on("click",b,(function(){return e.submit()}))},t.prototype.onExportSqlManagerClick=function(t){var e=Z(i.showModalForm(t.getId()));this.fillExportForm(e,t),e.submit()},t.prototype.fillExportForm=function(t,e){var n=e.getContainer().find(a).data("query");t.find('textarea[name="sql"]').val(n),t.find('input[name="name"]').val(this.getNameFromBreadcrumb())},t.prototype.getNameFromBreadcrumb=function(){var t=Z(f).find(h),e="";return t.each((function(t,n){var o=Z(n),i=o.find("a").length>0?o.find("a").text():o.text();e.length>0&&(e=e.concat(" > ")),e=e.concat(i)})),e},t}(),et=n(0);
/**
 * Copyright since 2007 PrestaShop SA and Contributors
 * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/OSL-3.0
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to https://devdocs.prestashop.com/ for more information.
 *
 * @author    PrestaShop SA and Contributors <contact@prestashop.com>
 * @copyright Since 2007 PrestaShop SA and Contributors
 * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
 */
/**
 * Copyright since 2007 Carmine Di Gruttola
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 *  @author    cdigruttola <c.digruttola@hotmail.it>
 *  @copyright Copyright since 2007 Carmine Di Gruttola
 *  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *
 */
const{$:nt}=window;nt(()=>{const t=new y("cartrulequantity");t.addExtension(new G),t.addExtension(new O),t.addExtension(new D),t.addExtension(new J),t.addExtension(new K),t.addExtension(new Y),t.addExtension(new tt),new et.a})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,